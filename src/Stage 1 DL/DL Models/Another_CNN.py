import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt

# Define the new model
model = models.Sequential([
    layers.Conv2D(64, (3, 3), activation='relu', input_shape=(224, 224, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(256, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(256, activation='relu'),
    layers.Dropout(0.5),  # Adding dropout for regularization
    layers.Dense(7, activation='softmax')
])

# Compile the new model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Train the new model
new_history = model.fit(train_generator, epochs=15, validation_data=validation_generator)

# Plot training history for the new model
plt.plot(new_history.history['accuracy'], label='accuracy')
plt.plot(new_history.history['val_accuracy'], label='val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0, 1])
plt.legend(loc='lower right')
plt.show()


test_datagen = ImageDataGenerator(rescale=1./255)  # No split for testing
test_generator = test_datagen.flow_from_directory(
    'train and test/test',
    target_size=(224, 224),
    batch_size=32,
    class_mode='sparse',
    shuffle=False  # Don't shuffle for evaluation
)
# Evaluate the model on the validation set
val_loss, val_accuracy = model.evaluate(test_generator)
print("Validation Accuracy: {:.2f}%".format(val_accuracy * 100))

# Make predictions on the validation set
predictions = model.predict(test_generator)