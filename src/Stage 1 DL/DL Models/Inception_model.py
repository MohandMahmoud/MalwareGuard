import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import InceptionV3
import matplotlib.pyplot as plt

# Create an ImageDataGenerator for data augmentation and normalization
train_datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2  # Splitting 20% of the data for validation
)

test_datagen = ImageDataGenerator(rescale=1./255)  # No split for testing

# Load the InceptionV3 model pretrained on ImageNet
base_model = InceptionV3(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Freeze the base model
base_model.trainable = False

# Add custom classification layers on top of the base model
model = models.Sequential([
    base_model,
    layers.GlobalAveragePooling2D(),
    layers.Dense(1024, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(10, activation='softmax')  # Adjust the number of output classes as needed
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Load and preprocess the dataset with train/validation split
train_generator = train_datagen.flow_from_directory(
    'train and test/train',
    target_size=(224, 224),
    batch_size=32,
    class_mode='sparse',
    subset='training'  # Specify training subset
)

validation_generator = train_datagen.flow_from_directory(
    'train and test/train',
    target_size=(224, 224),
    batch_size=32,
    class_mode='sparse',
    subset='validation'  # Specify validation subset
)

test_generator = test_datagen.flow_from_directory(
    'train and test/test',
    target_size=(224, 224),
    batch_size=32,
    class_mode='sparse',
    shuffle=False  # Don't shuffle for evaluation
)

# Train the model
history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // train_generator.batch_size,
    epochs=40,  # Adjust the number of epochs as needed
    validation_data=validation_generator,
    validation_steps=validation_generator.samples // validation_generator.batch_size
)

# Evaluate the model on the test set
test_loss, test_acc = model.evaluate(test_generator)
print("Testing Accuracy: {:.2f}%".format(test_accuracy * 100))

# Plot training history
plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()