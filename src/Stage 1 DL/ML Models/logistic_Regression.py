import os
import cv2
import numpy as np
import LoadData as ld
from sklearn.cluster import KMeans
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.feature_extraction import image
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV
# Set the path to your dataset root directory
dataset_root = 'train and test'



# Load data and labels from the training set
X_train, y_train = ld.load_data_and_labels(os.path.join(dataset_root, 'train'))

# Load data and labels from the testing set
X_test, y_test = ld.load_data_and_labels(os.path.join(dataset_root, 'test'))
# Define the hyperparameter grid
param_grid = {
    'C': [0.001, 0.01, 0.1, 1, 10, 100],
    'penalty': ['l1', 'l2'],
    'solver': ['lbfgs', 'liblinear', 'newton-cg', 'sag', 'saga'],
    'max_iter': [100, 200, 300]
}

# Create a logistic regression model
logreg = LogisticRegression()

# Use GridSearchCV for hyperparameter tuning
grid_search = GridSearchCV(logreg, param_grid, cv=5)
grid_search.fit(X_train, y_train)

# Get the best hyperparameters
best_params = grid_search.best_params_
print("Best Hyperparameters:", best_params)

# Train the logistic regression model with the best hyperparameters
best_logreg = LogisticRegression(**best_params)
best_logreg.fit(X_train, y_train)

